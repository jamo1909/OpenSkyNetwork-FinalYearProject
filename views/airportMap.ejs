<!DOCTYPE html>
<html>
<head>
    <title>Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.5.1/dist/leaflet.css"/>
    <link rel='stylesheet' href='/stylesheets/map.css'/>
    <link rel='stylesheet' href='/stylesheets/templates/templates.css'/>
    <link rel="shortcut icon" type="image/x-icon" href="docs/images/favicon.ico"/>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
          integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
          crossorigin=""/>
    <script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
            integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
            crossorigin=""></script>


</head>
<style>
    .leaflet-popup-content-wrapper {
        background-color: #000;
        color: white;
    }
</style>
<body>
<% include templates/header.ejs %>
<div id='Map'></div>
<div class="footer" style="display: block;">
    <h2 class="footerTitle" style="display: block;">Real Time Aviation Emissions</h2>
    <!--    <div style="text-align: right; margin-bottom: 2%; display: block;">-->
    <!--        <input class="search" type="text">-->
    <!--        <input type="submit" id="submit" value="Submit"/>-->
    <!--    </div>-->
</div>
<script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"></script>
<script>
    /*   var token = "aa3ebd6aab71743de4b90ba32e545cee0865be78";
       var data =<%- JSON.stringify(jsonData) %>;


    var x;
    const icon = L.icon;
    var map = L.map(document.getElementById('Map')).setView([53, -6.2603], 6);

    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    }).addTo(map);
    const airportIcon = L.icon({
        iconUrl: '/images/airport.png',
        iconSize: [15, 15], // size of the icon
        iconAnchor: [0, 0], // point of the icon which will correspond to marker's location
        popupAnchor: [0, 0] // point from which the popup should open relative to the iconAnchor
    });
    airQualityFetch(data);

    async function airQualityFetch(data) {
        for (var x = 0; x < 1800; x++) {
            let lat = data[x].latitude;
            let long = data[x].longitude;
            lat = Math.round(lat * 10) / 10;
            long = Math.round(long * 10) / 10;
            const url = "https://api.waqi.info/feed/geo:" + lat + ";" + long + "/?token=" + token + "";
            console.log(url);
            const response = await fetch(url);
            const quality = await response.json();
            let airQualityData = {
                airQuality: quality.data.aqi,
                airStatus: quality.status
            };

            L.marker([data[x].latitude, data[x].longitude], {icon: airportIcon}).addTo(map)
                .bindPopup('Name: ' + data[x].name + ' <br>' +
                    'City: ' + data[x].city + ' <br> ' +
                    'Country: ' + data[x].country + ' <br> ' +
                    'Lat: ' + data[x].latitude + ' <br> ' +
                    'Long: ' + data[x].longitude + ' <br> ' +
                    'altitude: ' + data[x].altitude + 'm <br>' +
                    'Air Quality: ' + airQualityData.airQuality + ' AQI<br> ' +
                    'Air Status: ' + airQualityData.airStatus)
        }


        // return airQualityData;
    }
*/
    //
    // L.marker([39.61, -105.02]).bindPopup('This is Littleton, CO.').addTo(cities),
    //     L.marker([39.74, -104.99]).bindPopup('This is Denver, CO.').addTo(cities),
    //     L.marker([39.73, -104.8]).bindPopup('This is Aurora, CO.').addTo(cities),
    //     L.marker([39.77, -105.23]).bindPopup('This is Golden, CO.').addTo(cities);

    var airports = L.layerGroup();
    var token = "aa3ebd6aab71743de4b90ba32e545cee0865be78";
    var data =<%- JSON.stringify(jsonData) %>;


    var x;
    const icon = L.icon;
    var mbAttr = 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
        '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
        'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        mbUrl = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';

    var grayscale = L.tileLayer(mbUrl, {id: 'mapbox/light-v9', attribution: mbAttr}),
        streets = L.tileLayer(mbUrl, {id: 'mapbox/streets-v11', attribution: mbAttr});

    var map = L.map('Map', {
        center: [53, -6.2603],
        zoom: 6,
        layers: [streets, airports]
    });


    const airportIcon = L.icon({
        iconUrl: '/images/airport.png',
        iconSize: [15, 15], // size of the icon
        iconAnchor: [0, 0], // point of the icon which will correspond to marker's location
        popupAnchor: [0, 0] // point from which the popup should open relative to the iconAnchor
    });
    airQualityFetch(data);

    async function airQualityFetch(data) {
        for (var x = 0; x < 1800; x++) {
            let lat = data[x].latitude;
            let long = data[x].longitude;
            lat = Math.round(lat * 10) / 10;
            long = Math.round(long * 10) / 10;
            const url = "https://api.waqi.info/feed/geo:" + lat + ";" + long + "/?token=" + token + "";
            console.log(url);
            const response = await fetch(url);
            const quality = await response.json();
            let airQualityData = {
                airQuality: quality.data.aqi,
                airStatus: quality.status
            };
            // getAirQualityColour(parseInt(airQualityData.airQuality));

            L.marker([data[x].latitude, data[x].longitude], {icon: airportIcon}).addTo(airports)
                .bindPopup('Name: ' + data[x].name + ' <br>' +
                    'City: ' + data[x].city + ' <br> ' +
                    'Country: ' + data[x].country + ' <br> ' +
                    'Lat: ' + data[x].latitude + ' <br> ' +
                    'Long: ' + data[x].longitude + ' <br> ' +
                    'altitude: ' + data[x].altitude + 'm <br>' +
                    'Air Quality: ' + airQualityData.airQuality + ' AQI<br> ' +
                    'Air Status: ' + airQualityData.airStatus)
        }
    }

    // function getAirQualityColour(airQuality){
    //     if(airQuality > 0 && airQuality < 25){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'red'
    //     }else if(airQuality > 25 && airQuality < 50){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'mediumseagreen'
    //     }else if(airQuality > 50 && airQuality < 75){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'ForestGreen'
    //     }else if(airQuality > 75 && airQuality < 100){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'ForestGreen'
    //     }else if(airQuality > 100 && airQuality < 125){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'red'
    //     }else if(airQuality > 125 && airQuality < 150){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'red'
    //     }else if(airQuality > 150 && airQuality < 175){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'red'
    //     }else if(airQuality > 175 && airQuality < 200){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'red'
    //     }else if(airQuality > 200 && airQuality < 300){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'red'
    //     }else if(airQuality > 300 && airQuality < 400){
    //         document.getElementsByClassName("leaflet-popup-content-wrapper").style.backgroundColor = 'red'
    //     }else {
    //
    //     };
    // }

    var baseLayers = {
        "Streets": streets,
        "Grayscale": grayscale

    };

    var overlays = {
        "Airports": airports
    };

    L.control.layers(baseLayers, overlays).addTo(map);

    // for(x in data) {
    // for (var x = 0; x < 1800; x++) {
    // var airQualityData = airQualityFetch(data[x].latitude, data[x].longitude)
    // L.marker([data[x].latitude, data[x].longitude], {icon: airportIcon}).addTo(map)
    //     .bindPopup('Name: ' + data[x].name + ' <br>' +
    //         'City: ' + data[x].city + ' <br> ' +
    //         'Country: ' + data[x].country + ' <br> ' +
    //         'Lat: ' + data[x].latitude + ' <br> ' +
    //         'Long: ' + data[x].longitude + ' <br> ' +
    //         'altitude: ' + data[x].altitude + 'm <br>' +
    //         'Air Quality: ' + airQualityData.airQuality + ' <br> ' +
    //         'Air Status: ' + airQualityData.airStatus)

    // }

</script>
</body>

</html>