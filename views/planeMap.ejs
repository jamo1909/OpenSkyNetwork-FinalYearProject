<!DOCTYPE html>
<html>
<head>
    <title>Map</title>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.5.1/dist/leaflet.css"/>
    <link rel='stylesheet' href='/stylesheets/map.css'/>
    <link rel='stylesheet' href='/stylesheets/templates/templates.css'/>

</head>
<body>
<% include templates/header.ejs %>
<div id='Map'></div>
<% include templates/footer.ejs %>
</body>
<script src="https://unpkg.com/leaflet@1.5.1/dist/leaflet.js"></script>
<script>

    /*
    Links:
    https://opensky-network.org/api/flights/all?begin=1517227200&end=1517230800
    https://opensky-network.org/api/states/all
    */
    var airplanes = L.layerGroup();
    var bool = false;
    const unixTime = {
        now: 0,
        hourBehind: 0,
        twoHoursBehind: 0
    };

    function fetchData() {
        getCurrentTimeInUnix();
        // console.log("Hour Behind: " + unixTime.hourBehind + "\nTwoHoursBehind: " + unixTime.twoHoursBehind);
        return fetch("https://opensky-network.org/api/states/all?begin=" + unixTime.hourBehind + "&end=" + unixTime.twoHoursBehind)
            .then((res) => {
                return res.json();
            })
            .then((res) => {
                return res.states.filter((state) => {
                    return (state[2] === 'Ireland')
                        && (state[5]) && (state[6]);
                });
            })
            .catch((err) => {
                if (err) throw err
            })
    }

    function plotStates(map, markers) {
        fetchData().then(function (states) {
            states.forEach((state) => {
                var airport = getAirports(state[0]);
                if (state[2] == 'Ireland') {
                    const lat = state[6],
                        lng = state[5],
                        icao24 = state[0],
                        velocity = state[9];
                    if (markers[icao24]) {
                        markers[icao24].setLatLng([lat, lng]);
                    } else {
                        markers[icao24] = L.marker([lat, lng], {icon: airportIcon});
                        markers[icao24].addTo(airplanes)
                            .bindPopup('ICAO Code: ' + icao24 + ' <br>' +
                                'Lat: ' + lat + ' <br>' +
                                'Long: ' + lng + ' <br>' +
                                'velocity: ' + velocity + 'm/s <br>' +
                                'Origin: ' + airport.arrival + '<br>' +
                                'Destination:' + airport.destination + ' <br> ' +
                                '<button onclick="Emissions()">Emissions</button>')
                    }
                }
            });


            if (bool == false) {
                var baseLayers = {
                    "Streets": streets,
                    "Grayscale": grayscale
                };

                var overlays = {
                    "Airplanes": airplanes
                };

                L.control.layers(baseLayers, overlays).addTo(map);
                bool = true;
                setTimeout(() => plotStates(map, markers), 3000);
            } else {
                setTimeout(() => plotStates(map, markers), 3000);
            }
        });

    }

    async function getAirports(planeIcao) {
        let airport = {
            arrival: "",
            destination: ""
        };
        var unixTime = getCurrentTimeInUnix();
        console.log(planeIcao);
        const airport_url = "https://opensky-network.org/api/flights/aircraft?icao24=" + planeIcao + "&begin=" + parseInt(unixTime.twoHoursBehind) + "&end=" + parseInt(unixTime.now);
        console.log(airport_url);
        const response = await fetch(airport_url);
        const data = await response.json();
        if (data[0].estArrivalAirport == null || data[0].estDepartureAirport == null) {
            // const airport_url = "https://opensky-network.org/api/flights/aircraft?icao24=" + planeIcao + "&begin=" + parseInt(unixTime.twoHoursBehind) + "&end=" + parseInt(unixTime.hourBehind);
            // console.log(airport_url);
            // const response = await fetch(airport_url);
            // const data = await response.json();
            airport.arrival = data[1].estArrivalAirport;
            // console.log(data[0].estDepartureAirport);
            airport.destination = data[1].estDepartureAirport;
        } else {
            console.log(data[0]);
            airport.arrival = data[0].estArrivalAirport;
            airport.destination = data[0].estDepartureAirport;
        }
        console.log("TEST: " + airport);
        return airport;
    }

    function getCurrentTimeInUnix() {
        let myDate = new Date();
        unixTime.now = myDate.getTime() / 1000.0;
        // console.log("UnixTime.now: " + unixTime.now);
        myDate.setHours(myDate.getHours() - 1);
        unixTime.hourBehind = myDate.getTime() / 1000.0;
        // console.log("UnixTime.hourBehind: " + unixTime.hourBehind);
        myDate.setHours(myDate.getHours() - 2);
        unixTime.twoHoursBehind = myDate.getTime() / 1000.0;
        // console.log("UnixTime.twoHoursBehind: " + unixTime.twoHoursBehind);
    }

    const airportIcon = L.icon({
        iconUrl: '/images/planeIconTest.png',
        iconSize: [15, 15], // size of the icon
        iconAnchor: [0, 0], // point of the icon which will correspond to marker's location
        popupAnchor: [0, 0] // point from which the popup should open relative to the iconAnchor
    });
    const icon = L.icon;
    var mbAttr = 'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, ' +
        '<a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, ' +
        'Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',
        mbUrl = 'https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=pk.eyJ1IjoibWFwYm94IiwiYSI6ImNpejY4NXVycTA2emYycXBndHRqcmZ3N3gifQ.rJcFIG214AriISLbB6B5aw';

    var grayscale = L.tileLayer(mbUrl, {id: 'mapbox/light-v9', attribution: mbAttr}),
        streets = L.tileLayer(mbUrl, {id: 'mapbox/streets-v11', attribution: mbAttr});

    var map = L.map('Map', {
        center: [53, -6.2603],
        zoom: 6,
        layers: [streets, airplanes]
    });
    // L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    //     attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
    // }).addTo(map);


    const markers = {};
    plotStates(map, markers);
</script>
</html>